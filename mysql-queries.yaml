---

overview-human: |-
  SELECT dimension, subdimension, level, group_concat(name separator "\n")
  FROM activity
  GROUP BY dimension, subdimension, level;

overview: |-
  SELECT dimension, subdimension, level, name
  FROM activity;

activities-per-dimension: |-
  SELECT distinct dimension, subdimension, count(*)
  FROM activity
  GROUP BY dimension, subdimension;


activity-samm2: |-
  SELECT a.dimension,a.subdimension,a.name,a.references,s.*
  FROM
    activity as a,
    samm as s
  WHERE
    JSON_SEARCH(a.references, 'one',
      CONCAT("samm2:", s.id)
    ) IS NOT NULL;

mappings-activity-samm2: |-
  SELECT s.id, a.dimension,a.subdimension,a.name,a.references
  FROM
    activity as a,
    samm as s
  WHERE
    JSON_SEARCH(a.references, 'one',
      CONCAT("samm2:", s.id)
    ) IS NOT NULL;

get-activity-samm2: |-
  SELECT DISTINCT s.*
  FROM
    activity as a,
    samm as s
  WHERE
    JSON_SEARCH($references, 'one',
      CONCAT("samm2:", s.id)
    ) IS NOT NULL


activity-references-unique: |-
  SELECT DISTINCT  r.rid, a.dimension, a.subdimension, a.name, a.references
  FROM activity AS a,
  JSON_TABLE(
    a.references,
    "$[*]" COLUMNS(rid VARCHAR(32) PATH '$')
  ) as r;

implementations-rating-by-references-1: |-
  SELECT
    i.iid,
    group_concat(distinct r.rid) as refs,
    count(Distinct r.rid) value
  FROM
  activity AS a,
  JSON_TABLE(
     a.references,
     "$[*]" COLUMNS(rid VARCHAR(32) PATH '$')
      ) AS r,
  JSON_TABLE(
     a.implementation,
     "$[*]" COLUMNS(iid VARCHAR(32) PATH '$')
      ) AS i
  WHERE i.iid IS NOT NULL
  AND r.rid IS NOT NULL
  AND length(i.iid) > 2
  GROUP BY i.iid, a.name
  ORDER BY 3


implementations-rating-by-references-2: |-
  SELECT
    implementation.name,
    group_concat(distinct r.rid) as refs,
    count(Distinct r.rid) value
  FROM
  activity AS a,
  JSON_TABLE(
     a.references,
     "$[*]" COLUMNS(rid VARCHAR(32) PATH '$')
      ) AS r,
  JSON_TABLE(
     a.implementation,
     "$[*]" COLUMNS(iid VARCHAR(32) PATH '$')
      ) AS i,
  implementation
  WHERE i.iid IS NOT NULL
  AND implementation.name = i.iid
  AND r.rid IS NOT NULL
  AND length(i.iid) > 2
  GROUP BY implementation.name, a.name
  ORDER BY 3

samm2-unused-entries: |-
  SELECT DISTINCT s.* from samm as s, activity as a
  WHERE   JSON_SEARCH(a.references, 'one', s.id) IS NULL;

implementation-references-unique: |-
  SELECT DISTINCT i.iid as implementation, r.rid as reference,  a.name as activity
  FROM activity AS a,
     JSON_TABLE(
    a.references,
    "$[*]" COLUMNS(rid VARCHAR(32) PATH '$')
  ) AS r,
    JSON_TABLE(
    a.implementation,
    "$[*]" COLUMNS(iid VARCHAR(32) PATH '$')
  ) AS i
  WHERE i.iid is not NULL
  AND r.rid is not NULL
  AND length(i.iid) > 2
  ORDER BY i.iid;


implementation-references-unique-count: |-
  SELECT i.iid as implementation, count(a.name)
  FROM activity AS a,
     JSON_TABLE(
    a.references,
    "$[*]" COLUMNS(rid VARCHAR(32) PATH '$')
  ) AS r,
    JSON_TABLE(
    a.implementation,
    "$[*]" COLUMNS(iid VARCHAR(32) PATH '$')
  ) AS i
  WHERE i.iid IS NOT NULL
  AND r.rid IS NOT NULL
  AND length(i.iid) > 2
  GROUP BY i.iid
  ORDER BY 2 DESC
  ;

#
# trashbin
#

activity-samm-1: |-
    SELECT *
    FROM activity as a, samm as s
    WHERE JSON_CONTAINS(
      a.refs,
      CONCAT ('"', s.id, '"'),
      '$');

activity-samm-table: |-
    SELECT *
    FROM
      activity as a,
      samm as s,
      JSON_TABLE(
        a.refs,
        "$[*]" COLUMNS(rid VARCHAR(32) PATH '$')
      ) as r
    WHERE
      r.rid like 'V%' AND r.rid = s.id;
